name: Frontend CI

on:
  push:
    paths:
      - 'frontend/**'
  workflow_dispatch: # This event allows manual triggering

jobs:

  build-ubuntu:
    runs-on: ubuntu-20.04

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18.16.0

    - name: Install dependencies
      run: |
        cd frontend
        make install

    - name: Format code
      run: |
        cd frontend
        make format

    - name: Lint the code
      run: |
        cd frontend
        make lint

    - name: Run tests
      run: |
        cd frontend
        make test

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18.16.0

    - name: Install dependencies
      run: |
        cd frontend
        npm install

    - name: Lint the code
      run: |
        cd frontend
        npm run lint

    - name: Run tests
      run: |
        cd frontend
        npx ng test --watch=false --browsers=ChromeHeadless

  calculate-coverage:
    needs: build-ubuntu # Make sure this job runs after the tests in build-ubuntu
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 18.16.0

    - name: Install Angular CLI
      run: npm install -g @angular/cli

    - name: Install project dependencies
      run: |
        cd frontend
        npm install

    - name: Run tests with code coverage
      run: |
        cd frontend
        npx ng test --watch=false --browsers=ChromeHeadless --code-coverage

    - name: Extract coverage data
      run: |
        cd frontend
        STATEMENTS=$(cat coverage/frontend/index.html | grep -oP 'Statements<\/span>\n\s*<span class="strong">\K\d+\.\d+')
        BRANCHES=$(cat coverage/frontend/index.html | grep -oP 'Branches<\/span>\n\s*<span class="strong">\K\d+\.\d+')
        FUNCTIONS=$(cat coverage/frontend/index.html | grep -oP 'Functions<\/span>\n\s*<span class="strong">\K\d+\.\d+')
        LINES=$(cat coverage/frontend/index.html | grep -oP 'Lines<\/span>\n\s*<span class="strong">\K\d+\.\d+')
    
        echo "::set-output name=statements::$STATEMENTS"
        echo "::set-output name=branches::$BRANCHES"
        echo "::set-output name=functions::$FUNCTIONS"
        echo "::set-output name=lines::$LINES"
      if: success()
    
    - name: Update README with coverage data
      run: |
        STATEMENTS=$INPUT_STATEMENTS
        BRANCHES=$INPUT_BRANCHES
        FUNCTIONS=$INPUT_FUNCTIONS
        LINES=$INPUT_LINES
    
        sed -i "s|Statements: \[![statements]](/|Statements: [![statements]](/$STATEMENTS%|g" frontend/README.md
        sed -i "s|Branches: \[![branches]](/|Branches: [![branches]](/$BRANCHES%|g" frontend/README.md
        sed -i "s|Functions: \[![functions]](/|Functions: [![functions]](/$FUNCTIONS%|g" frontend/README.md
        sed -i "s|Lines: \[![lines]](/|Lines: [![lines]](/$LINES%|g" frontend/README.md
      env:
        INPUT_STATEMENTS: ${{ steps.extract_coverage.outputs.statements }}
        INPUT_BRANCHES: ${{ steps.extract_coverage.outputs.branches }}
        INPUT_FUNCTIONS: ${{ steps.extract_coverage.outputs.functions }}
        INPUT_LINES: ${{ steps.extract_coverage.outputs.lines }}
      if: success()

